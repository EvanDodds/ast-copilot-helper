name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  release:
    types: [ published ]
  schedule:
    # Run nightly performance benchmarks and security scans
    - cron: '0 2 * * *'

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_DEFAULT: '20'
  NODE_VERSION_MATRIX: '["18", "20", "22"]'
  PLATFORM_MATRIX: '["ubuntu-latest", "windows-latest", "macos-latest"]'

jobs:
  # ===============================
  # FAST FEEDBACK JOBS (PR + Main)
  # ===============================
  
  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    # Skip draft PRs
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    outputs:
      should-run-benchmarks: ${{ steps.check.outputs.should-run-benchmarks }}
      is-main-push: ${{ steps.context.outputs.is-main-push }}
      is-release: ${{ steps.context.outputs.is-release }}
      is-pr: ${{ steps.context.outputs.is-pr }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build tools for native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Cache TypeScript build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/tsconfig.tsbuildinfo
            packages/*/dist
            .tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig*.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-typescript-

      - name: Run ESLint
        run: yarn run lint

      - name: Run Prettier format check
        run: yarn run format:check

      - name: Run TypeScript type check
        run: yarn run type-check

      - name: Set context outputs
        id: context
        run: |
          echo "is-main-push=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}" >> $GITHUB_OUTPUT
          echo "is-release=${{ github.event_name == 'release' }}" >> $GITHUB_OUTPUT
          echo "is-pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_OUTPUT

      - name: Check benchmark conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ contains(github.event.head_commit.message, '[benchmark]') }}" == "true" ]]; then
            echo "should-run-benchmarks=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-benchmarks=false" >> $GITHUB_OUTPUT
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: Run security scanning
        run: yarn run security:scan
        continue-on-error: false

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: security-audit-report.json
          retention-days: 30

  unit-tests:
    name: Unit Tests
    needs: validate
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        # PR: Single platform/version for speed
        # Main: Multi-platform/version for coverage
        os: ${{ needs.validate.outputs.is-main-push == 'true' && fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') || fromJson('["ubuntu-latest"]') }}
        node-version: ${{ needs.validate.outputs.is-main-push == 'true' && fromJson('["18", "20", "22"]') || fromJson('["20"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run unit tests
        run: yarn run test:unit
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        with:
          name: test-results-unit
          path: |
            test-output/
            coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit-tests

  # =====================================
  # COMPREHENSIVE JOBS (Main Branch Only)
  # =====================================

  integration-tests:
    name: Integration Tests
    needs: [validate, unit-tests]
    # Only run on main branch pushes, releases, or scheduled runs
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true' || 
       github.event_name == 'schedule') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
        node-version: ${{ fromJson('["18", "20", "22"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run integration tests
        run: yarn run test:integration
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        with:
          name: test-results-integration
          path: test-output/integration/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    needs: [validate, unit-tests]
    # Only run on main branch pushes, releases, or scheduled runs
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true' || 
       github.event_name == 'schedule') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run performance validation
        run: yarn run test:performance
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-output/performance/
          retention-days: 30

  # =================================
  # NIGHTLY BENCHMARK JOBS (Scheduled)
  # =================================

  performance-benchmarks:
    name: Performance Benchmarks
    needs: validate
    # Only run on schedule or when explicitly requested
    if: needs.validate.outputs.should-run-benchmarks == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run comprehensive benchmarks
        run: yarn run benchmark:all
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: test-output/benchmarks/
          retention-days: 90

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './test-output/benchmarks/summary.json';
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const body = `## 📊 Performance Benchmark Results\n\n${results.summary}`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # ========================
  # BUILD JOBS (Main + Release)
  # ========================

  build:
    name: Build Artifacts
    needs: [validate, unit-tests]
    # Run on main branch pushes and releases
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build all packages
        run: yarn run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            packages/*/dist/
            packages/*/build/
          retention-days: 7

  # ============================
  # QUALITY GATE (All Contexts)
  # ============================

  quality-gates:
    name: Quality Gates
    needs: [validate, security-audit, unit-tests]
    # Always run quality gates (PR, main, release)
    if: always() && (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - name: Check job results
        run: |
          echo "Validate result: ${{ needs.validate.result }}"
          echo "Security audit result: ${{ needs.security-audit.result }}"
          echo "Unit tests result: ${{ needs.unit-tests.result }}"
          
          if [[ "${{ needs.validate.result }}" != "success" ]]; then
            echo "❌ Code validation failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"

  # ================================
  # RELEASE JOBS (Release Events Only)  
  # ================================

  prepare-release:
    name: Prepare Release
    needs: [validate, quality-gates, build]
    if: needs.validate.outputs.is-release == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: yarn run release:changelog

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            CHANGELOG.md
            packages/*/package.json
          retention-days: 30

  deploy-npm:
    name: Deploy to NPM
    needs: [validate, prepare-release, integration-tests]
    if: needs.validate.outputs.is-release == 'true' && needs.integration-tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build packages
        run: yarn run build

      - name: Publish to NPM
        run: yarn run publish:npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-vscode:
    name: Deploy VS Code Extension
    needs: [validate, prepare-release, integration-tests]
    if: needs.validate.outputs.is-release == 'true' && needs.integration-tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build VS Code extension
        run: yarn workspace @ast-copilot-helper/vscode-extension run build

      - name: Publish to VS Code Marketplace
        run: yarn workspace @ast-copilot-helper/vscode-extension run publish
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}

  # ================================
  # NOTIFICATION JOBS (Always)
  # ================================

  notify-completion:
    name: Notify Completion
    needs: [validate, quality-gates]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.quality-gates.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ CI/CD Pipeline completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ CI/CD Pipeline failed. Please check the logs." >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR (Success)
        if: github.event_name == 'pull_request' && steps.status.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **CI/CD Pipeline Passed!** All quality gates have been satisfied. This PR is ready for review.'
            });

      - name: Comment on PR (Failure)
        if: github.event_name == 'pull_request' && steps.status.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **CI/CD Pipeline Failed!** Please address the failing checks before this PR can be merged. Check the [Actions tab](../../actions) for detailed logs.'
            });

      - name: Send Slack notification (Main branch failures)
        if: github.ref == 'refs/heads/main' && steps.status.outputs.status == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            🚨 Main branch CI/CD failed!
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}