#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Generate NAPI binding files for development and CI environments
 * This creates index.js and index.d.ts files that match our Rust NAPI exports
 * when the full NAPI build process isn't available.
 */

const engineDir = path.resolve(__dirname, '..', 'packages', 'ast-core-engine');
const indexJsPath = path.join(engineDir, 'index.js');
const indexDtsPath = path.join(engineDir, 'index.d.ts');

console.log('🔧 Generating NAPI binding files...');

// Generate index.js - cross-platform native module loader
const indexJsContent = `/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10 and below, we can try to detect musl by looking at the ldd command
  if (process.platform !== 'linux') {
    return false
  }
  
  // Try to detect musl by checking if we can run ldd and if it mentions musl
  try {
    const { execSync } = require('child_process')
    const lddOutput = execSync('ldd --version 2>&1 || true', { encoding: 'utf8' })
    return lddOutput.includes('musl')
  } catch {
    // Fallback: check if /etc/alpine-release exists (Alpine Linux uses musl)
    try {
      return existsSync('/etc/alpine-release')
    } catch {
      return false
    }
  }
}

// Since we're using a custom binding approach with local .node files,
// we skip platform-specific package resolution and go directly to local files

// Try to find a local .node file
const localNodeFiles = [
  \`ast-core-engine.\${platform}-\${arch}\${isMusl() ? '-musl' : arch === 'x64' && platform === 'linux' ? '-gnu' : ''}.node\`,
  'ast-core-engine.linux-x64-gnu.node',
  'ast-core-engine.node'
]

for (const nodeFile of localNodeFiles) {
  const localPath = join(__dirname, nodeFile)
  if (existsSync(localPath)) {
    try {
      nativeBinding = require(localPath)
      localFileExisted = true
      console.log(\`Loaded local native binding: \${nodeFile}\`)
      break
    } catch (error) {
      console.warn(\`Failed to load \${nodeFile}:\`, error.message)
    }
  }
}

if (!nativeBinding) {
  // For CI/development environments where .node files don't exist yet,
  // we create a stub that will fail gracefully at runtime but allow TypeScript compilation
  console.warn('⚠️  No native binding found - creating runtime stub for TypeScript compilation')
  console.warn('   This is normal in CI environments. The module will fail at runtime until Rust binaries are built.')
  console.warn(\`   Platform: \${platform}, Architecture: \${arch}\`)
  if (platform === 'linux') {
    console.warn(\`   Musl detected: \${isMusl()}\`)
  }
  console.warn('   To build native binaries: cargo build --release')
  
  // Create a stub that provides the correct interface but throws at runtime
  nativeBinding = {
    AstCoreEngineApi: class AstCoreEngineApi {
      constructor() { throw new Error('Native binding not available - run cargo build --release') }
    },
    setLogLevel: () => { throw new Error('Native binding not available - run cargo build --release') },
    getVersion: () => { throw new Error('Native binding not available - run cargo build --release') },
    validateConfig: () => { throw new Error('Native binding not available - run cargo build --release') },
    createEngine: () => { throw new Error('Native binding not available - run cargo build --release') },
    destroyEngine: () => { throw new Error('Native binding not available - run cargo build --release') },
    addDocuments: () => { throw new Error('Native binding not available - run cargo build --release') },
    searchSimilar: () => { throw new Error('Native binding not available - run cargo build --release') },
    listDocuments: () => { throw new Error('Native binding not available - run cargo build --release') },
    getDocumentById: () => { throw new Error('Native binding not available - run cargo build --release') },
    deleteDocument: () => { throw new Error('Native binding not available - run cargo build --release') },
    clearDatabase: () => { throw new Error('Native binding not available - run cargo build --release') },
    analyzeSyntaxPatterns: () => { throw new Error('Native binding not available - run cargo build --release') },
    findBestMatches: () => { throw new Error('Native binding not available - run cargo build --release') },
    calculateSemanticSimilarity: () => { throw new Error('Native binding not available - run cargo build --release') }
  }
}

// Export all the native functions and classes
const {
  AstCoreEngineApi,
  setLogLevel,
  getVersion,
  validateConfig,
  createEngine,
  destroyEngine,
  addDocuments,
  searchSimilar,
  listDocuments,
  getDocumentById,
  deleteDocument,
  clearDatabase,
  analyzeSyntaxPatterns,
  findBestMatches,
  calculateSemanticSimilarity
} = nativeBinding

module.exports = {
  AstCoreEngineApi,
  setLogLevel,
  getVersion,
  validateConfig,
  createEngine,
  destroyEngine,
  addDocuments,
  searchSimilar,  
  listDocuments,
  getDocumentById,
  deleteDocument,
  clearDatabase,
  analyzeSyntaxPatterns,
  findBestMatches,
  calculateSemanticSimilarity
}
`;

// Generate index.d.ts - TypeScript definitions
const indexDtsContent = `/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration for the AST Core Engine */
export interface EngineConfig {
  /** Vector dimension for embeddings */
  vectorDimension: number
  /** Maximum number of elements in the index */
  maxElements: number
  /** HNSW index configuration */
  hnswConfig: HnswConfig
  /** Database file path (optional) */
  dbPath?: string
}

/** HNSW (Hierarchical Navigable Small World) index configuration */
export interface HnswConfig {
  /** Number of bi-directional links created for each new element during construction */
  m: number
  /** Size of the dynamic candidate list */
  efConstruction: number
  /** Size of the dynamic candidate list used during search */
  ef: number
  /** Random seed for reproducible results */
  seed?: number
}

/** Document stored in the vector database */
export interface Document {
  /** Unique document identifier */
  id: string
  /** Document content/text */
  content: string
  /** Vector embedding of the document */
  vector: Array<number>
  /** Additional metadata */
  metadata?: Record<string, any>
  /** Timestamp when document was added */
  timestamp?: number
}

/** Search result with similarity score */
export interface SearchResult {
  /** The matching document */
  document: Document
  /** Similarity score (0.0 to 1.0) */
  score: number
  /** Distance from query vector */
  distance: number
}

/** Syntax pattern analysis result */
export interface SyntaxPattern {
  /** Pattern type identifier */
  patternType: string
  /** Pattern confidence score */
  confidence: number
  /** Pattern details and metadata */
  details: Record<string, any>
  /** Source code location */
  location?: {
    line: number
    column: number
    length: number
  }
}

/** Log levels for the engine */
export enum LogLevel {
  Error = 0,
  Warn = 1, 
  Info = 2,
  Debug = 3,
  Trace = 4
}

/** Main AST Core Engine API class */
export declare class AstCoreEngineApi {
  /** Create a new engine instance with the given configuration */
  constructor(config: EngineConfig)
  
  /** Add a single document to the vector database */
  addDocument(document: Document): void
  
  /** Add multiple documents to the vector database */
  addDocuments(documents: Array<Document>): void
  
  /** Search for similar documents using vector similarity */
  searchSimilar(queryVector: Array<number>, limit?: number): Array<SearchResult>
  
  /** List all documents in the database */
  listDocuments(limit?: number, offset?: number): Array<Document>
  
  /** Get a specific document by ID */
  getDocumentById(id: string): Document | null
  
  /** Delete a document by ID */
  deleteDocument(id: string): boolean
  
  /** Clear all documents from the database */
  clearDatabase(): void
  
  /** Analyze syntax patterns in code */
  analyzeSyntaxPatterns(code: string, language?: string): Array<SyntaxPattern>
  
  /** Find best matching documents for a query */
  findBestMatches(query: string, limit?: number): Array<SearchResult>
  
  /** Calculate semantic similarity between two pieces of text */
  calculateSemanticSimilarity(text1: string, text2: string): number
  
  /** Get current engine statistics */
  getStats(): {
    documentCount: number
    indexSize: number
    memoryUsage: number
  }
}

/** Set the global log level for the engine */
export declare function setLogLevel(level: LogLevel): void

/** Get the engine version */
export declare function getVersion(): string

/** Validate engine configuration */
export declare function validateConfig(config: EngineConfig): boolean

/** Create a new engine instance */
export declare function createEngine(config: EngineConfig): AstCoreEngineApi

/** Destroy an engine instance and free resources */
export declare function destroyEngine(engine: AstCoreEngineApi): void

/** Add documents to an engine instance */
export declare function addDocuments(engine: AstCoreEngineApi, documents: Array<Document>): void

/** Search for similar documents */
export declare function searchSimilar(engine: AstCoreEngineApi, queryVector: Array<number>, limit?: number): Array<SearchResult>

/** List all documents */
export declare function listDocuments(engine: AstCoreEngineApi, limit?: number, offset?: number): Array<Document>

/** Get document by ID */
export declare function getDocumentById(engine: AstCoreEngineApi, id: string): Document | null

/** Delete document by ID */
export declare function deleteDocument(engine: AstCoreEngineApi, id: string): boolean

/** Clear all documents */
export declare function clearDatabase(engine: AstCoreEngineApi): void

/** Analyze syntax patterns */
export declare function analyzeSyntaxPatterns(engine: AstCoreEngineApi, code: string, language?: string): Array<SyntaxPattern>

/** Find best matches */
export declare function findBestMatches(engine: AstCoreEngineApi, query: string, limit?: number): Array<SearchResult>

/** Calculate semantic similarity */
export declare function calculateSemanticSimilarity(engine: AstCoreEngineApi, text1: string, text2: string): number
`;

// Write the files
try {
  console.log(`  → Writing ${indexJsPath}`);
  fs.writeFileSync(indexJsPath, indexJsContent, 'utf8');
  
  console.log(`  → Writing ${indexDtsPath}`);
  fs.writeFileSync(indexDtsPath, indexDtsContent, 'utf8');
  
  console.log('✅ Successfully generated NAPI binding files');
  console.log('   These files provide TypeScript support and cross-platform loading');
  console.log('   for the Rust NAPI engine in development and CI environments.');
  
} catch (error) {
  console.error('❌ Failed to generate binding files:', error.message);
  process.exit(1);
}