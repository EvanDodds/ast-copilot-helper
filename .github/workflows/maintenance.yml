name: Maintenance and Security

on:
  schedule:
    # Run weekly dependency checks
    - cron: '0 6 * * 1'  # Monday 6 AM UTC
    # Run monthly security audit
    - cron: '0 8 1 * *'   # 1st of month 8 AM UTC
  workflow_dispatch:
    inputs:
      check-type:
        description: 'Type of check to run'
        required: true
        default: 'dependencies'
        type: choice
        options:
        - dependencies
        - security
        - performance
        - all

env:
  NODE_VERSION: '20'

jobs:
  # Dependency updates
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * 1' || github.event.inputs.check-type == 'dependencies' || github.event.inputs.check-type == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated packages
        run: |
          echo "🔍 Checking for outdated packages..."
          npm outdated || true
          
          echo "📊 Dependency analysis:" >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
          npm outdated >> dependency-report.md 2>&1 || true
          echo "\`\`\`" >> dependency-report.md

      - name: Update dependencies
        id: update
        run: |
          echo "📦 Updating dependencies..."
          
          # Update non-breaking changes
          npm update
          
          # Check if there are changes
          if git diff --exit-code package-lock.json > /dev/null; then
            echo "has-updates=false" >> $GITHUB_OUTPUT
          else
            echo "has-updates=true" >> $GITHUB_OUTPUT
          fi

      - name: Run tests after updates
        if: steps.update.outputs.has-updates == 'true'
        run: |
          echo "🧪 Running tests with updated dependencies..."
          npm ci
          npm test

      - name: Create Pull Request
        if: steps.update.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '🔄 Weekly Dependency Updates'
          body: |
            ## 🔄 Automated Dependency Updates
            
            This PR contains weekly dependency updates with non-breaking changes.
            
            ### 📊 Changes Summary
            $(cat dependency-report.md)
            
            ### ✅ Tests Status
            - All tests have been run and pass with updated dependencies
            - No breaking changes detected
            
            ### 📋 Review Checklist
            - [ ] Review updated packages for compatibility
            - [ ] Run additional integration tests if needed
            - [ ] Check for any new security advisories
            
            **Auto-generated by:** Maintenance workflow
          branch: chore/dependency-updates
          delete-branch: true

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 8 1 * *' || github.event.inputs.check-type == 'security' || github.event.inputs.check-type == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          
          # Generate detailed audit report
          npm audit --audit-level=low --json > audit-report.json || true
          npm audit --audit-level=low > audit-report.txt || true
          
          echo "📊 Security audit summary:"
          npm audit || true

      - name: Check for critical vulnerabilities
        id: critical-check
        run: |
          # Check for critical or high severity issues
          critical_count=$(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
          high_count=$(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
          
          echo "critical-vulnerabilities=$critical_count" >> $GITHUB_OUTPUT
          echo "high-vulnerabilities=$high_count" >> $GITHUB_OUTPUT
          
          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 0 ]; then
            echo "has-serious-vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "❌ Found $critical_count critical and $high_count high severity vulnerabilities"
          else
            echo "has-serious-vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "✅ No critical or high severity vulnerabilities found"
          fi

      - name: Attempt automatic fixes
        if: steps.critical-check.outputs.has-serious-vulnerabilities == 'true'
        run: |
          echo "🔧 Attempting automatic fixes..."
          npm audit fix || true
          
          # Check if fixes were applied
          if git diff --exit-code package-lock.json > /dev/null; then
            echo "No automatic fixes available"
          else
            echo "Automatic fixes applied"
            npm test || echo "Tests failed after security fixes - manual review needed"
          fi

      - name: Create security issue
        if: steps.critical-check.outputs.has-serious-vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let auditReport = 'Audit report not available';
            try {
              auditReport = fs.readFileSync('audit-report.txt', 'utf8');
            } catch (e) {
              console.log('Could not read audit report');
            }
            
            const body = `## 🚨 Security Vulnerabilities Detected
            
            **Critical:** ${{ steps.critical-check.outputs.critical-vulnerabilities }}
            **High:** ${{ steps.critical-check.outputs.high-vulnerabilities }}
            
            ### 📋 Audit Report
            \`\`\`
            ${auditReport.slice(0, 3000)}${auditReport.length > 3000 ? '...\n(truncated)' : ''}
            \`\`\`
            
            ### 🔧 Recommended Actions
            1. Review the vulnerabilities listed above
            2. Update affected packages to secure versions
            3. Test thoroughly after applying fixes
            4. Consider alternative packages if fixes are not available
            
            ### 🤖 Automatic Fixes
            Automatic fixes have been attempted. Please review changes in package-lock.json.
            
            **Priority:** High
            **Auto-generated by:** Security audit workflow`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Vulnerabilities Detected - Action Required',
              body: body,
              labels: ['security', 'high-priority', 'maintenance']
            });

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            audit-report.json
            audit-report.txt
          retention-days: 90

  # Performance monitoring
  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.check-type == 'performance' || github.event.inputs.check-type == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          echo "📊 Running performance monitoring benchmarks..."
          npm run test:benchmarks || npm test -- tests/benchmarks/ --reporter=json > perf-results.json 2>&1

      - name: Analyze performance trends
        id: analysis
        run: |
          echo "📈 Analyzing performance trends..."
          
          # Extract key metrics (simplified parsing)
          if grep -q "✅ Parsed.*nodes/second" *.json *.txt 2>/dev/null || true; then
            throughput=$(grep -o "[0-9]\+k\? nodes/second" *.json *.txt 2>/dev/null | head -1 || echo "unknown")
            echo "current-throughput=$throughput" >> $GITHUB_OUTPUT
          else
            echo "current-throughput=unknown" >> $GITHUB_OUTPUT
          fi
          
          # Check for performance regressions (this would need historical data)
          echo "performance-status=stable" >> $GITHUB_OUTPUT

      - name: Generate performance report
        run: |
          echo "# 📊 Performance Monitoring Report" > perf-report.md
          echo "**Date:** $(date)" >> perf-report.md
          echo "**Commit:** \`${{ github.sha }}\`" >> perf-report.md
          echo "" >> perf-report.md
          echo "## Key Metrics" >> perf-report.md
          echo "- **Throughput:** ${{ steps.analysis.outputs.current-throughput }}" >> perf-report.md
          echo "- **Status:** ${{ steps.analysis.outputs.performance-status }}" >> perf-report.md
          echo "" >> perf-report.md
          echo "## Detailed Results" >> perf-report.md
          echo "\`\`\`" >> perf-report.md
          cat perf-results.json 2>/dev/null || echo "Results not available" >> perf-report.md
          echo "\`\`\`" >> perf-report.md

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: |
            perf-report.md
            perf-results.json
          retention-days: 30

      - name: Comment on main branch
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let report = 'Performance report not available';
            try {
              report = fs.readFileSync('perf-report.md', 'utf8');
            } catch (e) {
              console.log('Could not read performance report');
            }
            
            // Find the latest commit on main branch
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: 'main',
              per_page: 1
            });
            
            if (commits.data.length > 0) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commits.data[0].sha,
                body: `## 📊 Performance Monitoring Update\n\n${report}`
              });
            }

  # Health check summary
  health-summary:
    name: Health Summary
    needs: [dependency-check, security-audit, performance-monitor]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate health summary
        run: |
          echo "## 🏥 Repository Health Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies:** ${{ needs.dependency-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** ${{ needs.security-audit.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance:** ${{ needs.performance-monitor.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall health status
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "**Overall Health:** 🚨 Critical - Security issues detected" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "**Overall Health:** ⚠️ Warning - Dependency issues" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.performance-monitor.result }}" == "failure" ]]; then
            echo "**Overall Health:** ⚠️ Warning - Performance issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Health:** ✅ Good" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Actions" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Check Dependencies](../../actions/workflows/maintenance.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔒 Security Audit](../../security/advisories)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Performance Trends](../../actions/workflows/ci.yml)" >> $GITHUB_STEP_SUMMARY