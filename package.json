{
  "name": "ast-copilot-helper",
  "version": "1.5.0",
  "description": "Monorepo for AST-based code analysis tools and MCP server",
  "type": "module",
  "private": true,
  "engines": {
    "node": ">=20.0.0"
  },
  "workspaces": [
    "packages/*",
    "docs"
  ],
  "scripts": {
    "build": "yarn workspaces foreach --all --parallel --topological --verbose run build",
    "build:all": "yarn run build",
    "build:release": "yarn workspaces foreach --all --parallel --topological --verbose run build:release",
    "build:watch": "yarn workspaces foreach --all --parallel --verbose run build:watch",
    "test": "node --max-old-space-size=12288 --optimize-for-size --gc-global --gc-interval=100 node_modules/vitest/vitest.mjs run --exclude='tests/integration/**' --exclude='packages/ast-helper/src/database/vector/**'",
    "test:all": "echo '🧪 Running ALL tests (unit + integration + benchmarks + rust)...' && yarn run test && yarn run test:integration && yarn run test:benchmarks && yarn run test:rust:all",
    "test:comprehensive": "yarn run test:all",
    "test:dev": "yarn run test:all",
    "test:unit": "echo '🧪 Running essential unit tests (excluding performance tests)...' && vitest run tests/unit --exclude='**/performance/**' --reporter=default",
    "test:precommit": "node --max-old-space-size=2048 ./node_modules/.bin/vitest run --config vitest.precommit.config.ts --reporter=default",
    "test:prepush": "node --max-old-space-size=4096 ./node_modules/.bin/vitest run --config vitest.prepush.config.ts --reporter=default",
    "test:fast": "yarn run test:prepush",
    "test:integration": "vitest run tests/integration --exclude='**/performance*.{test,spec}.{js,ts}' --exclude='**/scaling*.{test,spec}.{js,ts}'",
    "test:benchmarks": "vitest run --config vitest.benchmarks.config.ts",
    "test:benchmark": "vitest run --config vitest.benchmarks.config.ts",
    "test:watch": "vitest",
    "test:ci": "node --max-old-space-size=4096 ./node_modules/.bin/vitest run --config vitest.ci.config.ts --coverage --reporter=default --reporter=json --outputFile=test-output/test-results.json",
    "test:ci:fast": "node --max-old-space-size=2048 ./node_modules/.bin/vitest run --config vitest.ci.config.ts --reporter=default",
    "test:coverage": "vitest run --coverage",
    "test:ui": "vitest --ui",
    "test:e2e": "vitest run tests/integration",
    "test:rust": "cd packages/ast-core-engine && cargo check",
    "test:rust:check": "cd packages/ast-core-engine && cargo check",
    "test:rust:clippy": "cd packages/ast-core-engine && cargo clippy --all-targets -- -A warnings",
    "test:rust:fmt": "cd packages/ast-core-engine && cargo fmt --check",
    "test:rust:all": "yarn run test:rust:check && yarn run test:rust:fmt && yarn run test:rust:clippy && yarn run test:rust",
    "test:vector": "echo '🧪 Running vector database tests (performance benchmarks + WASM validation + regression detection)...' && vitest run packages/ast-helper/src/database/vector --reporter=verbose",
    "test:vector:performance": "echo '⏱️ Running vector database performance benchmarks...' && vitest run packages/ast-helper/src/database/vector/performance-benchmark.test.ts --reporter=verbose",
    "test:vector:wasm": "echo '🌐 Running WASM vector database validation tests...' && vitest run packages/ast-helper/src/database/vector/wasm-vector-database.test.ts --reporter=verbose",
    "test:vector:integration": "echo '🔗 Running vector database integration tests...' && vitest run packages/ast-helper/src/database/vector/integration.test.ts --reporter=verbose",
    "test:vector:regression": "echo '📈 Running vector database regression tests...' && vitest run packages/ast-helper/src/database/vector/regression.test.ts --reporter=verbose",
    "test:vector:quick": "echo '⚡ Running vector database quick validation...' && vitest run packages/ast-helper/src/database/vector --reporter=basic --run --exclude='**/performance-benchmark.test.ts'",
    "test:vector:ci": "echo '🤖 Running vector database CI tests...' && vitest run packages/ast-helper/src/database/vector --reporter=json --outputFile=test-output/vector-results.json",
    "test:performance": "echo '⚡ Running performance tests...' && yarn run test:benchmarks && yarn run test:vector:performance",
    "test:performance:baseline": "echo '📊 Running performance baseline tests...' && (yarn run baseline:compare || (echo '⚠️ No baseline found, updating baselines...' && yarn run baseline:update))",
    "baseline:update": "echo '📊 Updating performance baselines...' && tsx scripts/performance/baseline-update.ts",
    "baseline:validate": "echo '✅ Validating performance baselines...' && tsx scripts/performance/baseline-validate.ts",
    "baseline:compare": "echo '🔍 Comparing performance against baselines...' && tsx scripts/performance/baseline-compare.ts",
    "performance:dashboard": "echo '📈 Generating performance dashboard...' && tsx scripts/performance/dashboard-generate.ts",
    "dev": "yarn workspaces foreach --all --parallel --verbose run dev",
    "start:mcp": "yarn workspace ast-mcp-server run start",
    "start:cli": "yarn workspace ast-helper run start",
    "clean": "yarn workspaces foreach --all --parallel --verbose run clean && rm -rf coverage test-output test-tmp *.log",
    "clean:all": "yarn run clean && rm -rf node_modules packages/*/node_modules",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "lint-staged": "lint-staged",
    "lint:workspaces": "yarn workspaces foreach --all --parallel --verbose run lint",
    "lint:fix:workspaces": "yarn workspaces foreach --all --parallel --verbose run lint:fix",
    "type-check": "tsc --build --verbose",
    "typecheck": "yarn run type-check",
    "security:audit": "yarn npm audit --severity moderate",
    "security:fix": "yarn npm audit --severity moderate --json",
    "security:scan": "tsx scripts/ci-cd/security-scan.ts",
    "security:score": "tsx scripts/ci-cd/security-scan.ts",
    "coverage:check": "tsx scripts/ci-cd/coverage-check.ts",
    "perf:score": "tsx scripts/ci-cd/performance-score.ts",
    "perf:report": "tsx scripts/ci-cd/performance-score.ts",
    "quality:report": "tsx scripts/ci-cd/quality-report.ts",
    "format:check": "npx --yes prettier --check \"**/*.{ts,js,json,md}\" --ignore-path .gitignore",
    "format:fix": "npx --yes prettier --write \"**/*.{ts,js,json,md}\" --ignore-path .gitignore",
    "docs:dev": "cd docs && npm run dev",
    "docs:build": "cd docs && npm install && npm run build",
    "docs:preview": "cd docs && npm run preview",
    "docs:deploy": "cd docs && npm run build && npm run serve",
    "test:quick": "vitest run tests/unit/ci-cd",
    "package:cli": "cd packages/ast-helper && yarn build && yarn pack",
    "package:vscode": "cd packages/vscode-extension && yarn build && yarn package",
    "build:binaries": "npx tsx \"$(pwd)/scripts/build/build-binaries.ts\"",
    "build:binaries:all": "yarn run build:binaries --platforms win32,darwin,linux",
    "build:binary:win32": "yarn run build:binaries --platform win32",
    "build:binary:darwin": "yarn run build:binaries --platform darwin",
    "build:binary:linux": "yarn run build:binaries --platform linux",
    "validate:build": "yarn build && yarn typecheck && yarn test:unit",
    "changelog:generate": "tsx scripts/release/generate-changelog.ts",
    "version:update": "tsx scripts/release/update-version.ts",
    "deps:check": "yarn outdated",
    "deps:update": "yarn upgrade",
    "deploy:staging": "tsx scripts/ci-cd/deploy-staging.ts",
    "deploy:production": "tsx scripts/ci-cd/deploy-production.ts",
    "rollback:staging": "tsx scripts/ci-cd/rollback-automation.ts staging",
    "rollback:production": "tsx scripts/ci-cd/rollback-automation.ts production",
    "rollback:emergency": "tsx scripts/ci-cd/rollback-automation.ts",
    "ci:build-notifications": "tsx scripts/ci-cd/build-failure-notifications.ts",
    "ci:performance-monitor": "tsx scripts/ci-cd/performance-monitor.ts",
    "ci:alerting-system": "tsx scripts/ci-cd/alerting-system.ts",
    "ci:monitoring-dashboard": "tsx scripts/ci-cd/monitoring-dashboard.ts",
    "ci:workflow-optimizer": "tsx scripts/ci-cd/workflow-optimizer.ts",
    "ci:cache-manager": "tsx scripts/ci-cd/cache-manager.ts",
    "ci:resource-optimizer": "tsx scripts/ci-cd/resource-optimizer.ts",
    "ci:validate": "tsx scripts/ci-cd/validation-suite.ts",
    "ci:validate-all": "yarn run ci:validate && echo '✅ All validation completed'",
    "install:all": "yarn install",
    "postinstall": "yarn run prepare:husky",
    "prepare:husky": "echo 'Husky v9+ is properly initialized'",
    "test:ci-simulation": "node scripts/test-ci-simulation.cjs",
    "prepack": "yarn run build && yarn run test:ci",
    "prepare": "husky",
    "release:dry": "echo 'Dry run - would publish to npm'",
    "release": "yarn run prepack && npm publish --access=public"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "npx prettier --write",
      "eslint --fix --quiet"
    ],
    "*.{json,md}": [
      "npx prettier --write"
    ]
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^24.6.0",
    "@types/tmp": "^0.2.6",
    "@typescript-eslint/eslint-plugin": "^8.45.0",
    "@typescript-eslint/parser": "^8.45.0",
    "@vercel/ncc": "^0.38.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "esbuild": "^0.25.10",
    "eslint": "^9.36.0",
    "globals": "^16.4.0",
    "husky": "^9.1.7",
    "js-yaml": "^4.1.0",
    "lint-staged": "^16.2.3",
    "postject": "^1.0.0-alpha.6",
    "tmp": "^0.2.5",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.6",
    "typescript": "^5.9.3",
    "typescript-eslint": "^8.45.0",
    "vitest": "^3.2.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/EvanDodds/ast-copilot-helper.git"
  },
  "keywords": [
    "ast",
    "typescript",
    "mcp",
    "cli",
    "vscode-extension",
    "monorepo"
  ],
  "author": "EvanDodds",
  "license": "MIT",
  "os": [
    "win32",
    "darwin",
    "linux"
  ],
  "cpu": [
    "x64",
    "arm64"
  ],
  "packageManager": "yarn@4.9.4",
  "resolutions": {
    "esbuild": "^0.25.10"
  }
}
