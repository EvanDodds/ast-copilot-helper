name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [ready_for_review, synchronize]
  schedule:
    # Run nightly performance benchmarks and security scans
    - cron: "0 2 * * *"
  workflow_call:
    inputs:
      skip-nightly:
        description: "Skip nightly-only jobs (performance benchmarks, etc.)"
        required: false
        default: false
        type: boolean

# Permissions needed for GitHub Actions
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  actions: read

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_DEFAULT: "24"
  NODE_VERSION_MATRIX: '["20", "22", "24"]'
  PLATFORM_MATRIX: '["ubuntu-latest", "windows-latest", "macos-latest"]'

jobs:
  # ===============================
  # FAST FEEDBACK JOBS (PR + Main)
  # ===============================

  validate:
    name: Code Validation
    runs-on: ubuntu-latest
    # Skip draft PRs
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    outputs:
      should-run-benchmarks: ${{ steps.check.outputs.should-run-benchmarks }}
      should-run-vector-tests: ${{ steps.vector-changes.outputs.should-run }}
      is-main-push: ${{ steps.context.outputs.is-main-push }}
      is-release: ${{ steps.context.outputs.is-release }}
      is-pr: ${{ steps.context.outputs.is-pr }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build tools for native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Cache TypeScript build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/tsconfig.tsbuildinfo
            packages/*/dist
            .tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig*.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-typescript-

      - name: Run ESLint
        run: yarn run lint --max-warnings 3000

      - name: Run Prettier format check
        run: yarn run format:check

      - name: Setup Rust for binding generation
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Run TypeScript type check
        run: yarn run type-check

      - name: Set context outputs
        id: context
        run: |
          echo "is-main-push=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}" >> $GITHUB_OUTPUT
          echo "is-release=${{ github.event_name == 'release' }}" >> $GITHUB_OUTPUT
          echo "is-pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_OUTPUT

      - name: Check benchmark conditions
        id: check
        run: |
          # Skip benchmarks if explicitly requested via workflow_call input
          if [[ "${{ inputs.skip-nightly }}" == "true" ]]; then
            echo "Skipping benchmarks due to skip-nightly input"
            echo "should-run-benchmarks=false" >> $GITHUB_OUTPUT
          # For scheduled runs, check if there are new commits since last nightly run
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Get the timestamp of the last successful nightly run (24 hours ago)
            LAST_RUN_TIME=$(date -d '24 hours ago' --iso-8601=seconds)
            
            # Check if there are any commits since the last run
            RECENT_COMMITS=$(git log --since="$LAST_RUN_TIME" --oneline | wc -l)
            
            if [[ $RECENT_COMMITS -gt 0 ]]; then
              echo "Found $RECENT_COMMITS new commits since last nightly run"
              echo "should-run-benchmarks=true" >> $GITHUB_OUTPUT
            else
              echo "No new commits since last nightly run, skipping benchmarks"
              echo "should-run-benchmarks=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ contains(github.event.head_commit.message, '[benchmark]') }}" == "true" ]]; then
            echo "Explicit benchmark request found in commit message"
            echo "should-run-benchmarks=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-benchmarks=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for vector database changes
        id: vector-changes
        run: |
          # Check if vector database files have changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(packages/ast-helper/src/database/vector/|packages/ast-core-engine/)" > /dev/null; then
            echo "Vector database files changed, enabling specialized tests"
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(github.event.head_commit.message, '[vector-test]') }}" == "true" ]]; then
            echo "Explicit vector test request found in commit message"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "No vector database changes detected"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event.pull_request.draft == false || github.event_name != 'pull_request') &&
      (inputs.skip-nightly != true || github.event_name != 'schedule')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run security audit
        run: yarn run security:audit
        continue-on-error: false

      - name: Run security scanning
        run: yarn run security:scan
        continue-on-error: false

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: security-audit-report.json
          retention-days: 30

  rust-validation:
    name: Rust Validation
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/ast-core-engine/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust validation
        working-directory: packages/ast-core-engine
        run: |
          echo "🦀 Running Rust code validation..."
          echo "  → Checking Rust code compilation..."
          cargo check --verbose
          echo "  → Running Rust linting (Clippy)..."
          cargo clippy --all-targets -- -D warnings
          echo "  → Checking Rust formatting..."
          cargo fmt -- --check
          echo "  → Note: Skipping 'cargo test' for WASM-first project (requires wasm-pack build context)"

      - name: Upload Rust test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rust-validation-results
          path: |
            packages/ast-core-engine/target/debug/deps/
            packages/ast-core-engine/Cargo.lock
          retention-days: 7

  build-wasm:
    name: Build WASM Bindings
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/ast-core-engine/target/
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-

      - name: Build WASM package
        working-directory: packages/ast-core-engine
        run: |
          echo "🚀 Building WASM package with wasm-pack..."
          wasm-pack build --target web --out-dir ../../packages/ast-helper/src/database/vector/wasm-pkg --features wasm --no-default-features
          echo "✅ WASM build completed"

      - name: Test WASM package structure
        working-directory: packages/ast-helper/src/database/vector/wasm-pkg
        run: |
          echo "🧪 Verifying WASM package structure..."
          ls -la .
          echo "📦 Package contents:"
          cat package.json
          echo "🔍 Generated TypeScript definitions:"
          head -20 *.d.ts || echo "No .d.ts files found"
          echo "🌐 WASM binary verification:"
          ls -lh *.wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-package
          path: packages/ast-helper/src/database/vector/wasm-pkg/
          retention-days: 7



  unit-tests:
    name: Unit Tests
    needs: [validate]
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        # PR: Single platform/version for speed
        # Main: Multi-platform/version for coverage
        os: ${{ needs.validate.outputs.is-main-push == 'true' && fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') || fromJson('["ubuntu-latest"]') }}
        node-version: ${{ needs.validate.outputs.is-main-push == 'true' && fromJson('["20", "22", "24"]') || fromJson('["24"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable



      - name: Setup Rust for native module
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/ast-core-engine/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-



      - name: Build project dependencies
        run: yarn run build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Run unit tests
        run: yarn run test:unit
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        with:
          name: test-results-unit
          path: |
            test-output/
            coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit-tests

  # =====================================
  # COMPREHENSIVE JOBS (Main Branch Only)
  # =====================================

  integration-tests:
    name: Integration Tests
    needs: [validate, unit-tests]
    # Only run on main branch pushes, releases, or scheduled runs
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true' || 
       github.event_name == 'schedule') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
        node-version: ${{ fromJson('["20", "22", "24"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Setup Rust for native module
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/ast-core-engine/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build project dependencies
        run: yarn run build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Run integration tests
        run: yarn run test:integration
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        with:
          name: test-results-integration
          path: test-output/integration/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    needs: [validate, unit-tests]
    # Only run on main branch pushes, releases, or scheduled runs
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true' || 
       github.event_name == 'schedule') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Setup Rust for native module
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/ast-core-engine/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build project dependencies
        run: yarn run build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Run performance validation
        run: yarn run test:performance
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-output/performance/
          retention-days: 30

  # =================================
  # NIGHTLY BENCHMARK JOBS (Scheduled)
  # =================================

  performance-benchmarks:
    name: Performance Benchmarks
    needs: validate
    # Only run on schedule or when explicitly requested
    if: needs.validate.outputs.should-run-benchmarks == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run comprehensive benchmarks
        run: yarn run test:benchmarks
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: test-output/benchmarks/
          retention-days: 90

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './test-output/benchmarks/summary.json';
            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const body = `## 📊 Performance Benchmark Results\n\n${results.summary}`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # =====================================
  # VECTOR DATABASE TESTING (Conditional)
  # =====================================

  vector-wasm-tests:
    name: Vector Database WASM Tests
    needs: validate
    if: needs.validate.outputs.should-run-vector-tests == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run WASM feature parity tests
        run: yarn test:vector:wasm
        env:
          CI: true
          NODE_ENV: test

      - name: Upload WASM test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vector-wasm-test-results
          path: test-output/
          retention-days: 7

  vector-integration-tests:
    name: Vector Database Integration Tests
    needs: validate
    if: needs.validate.outputs.should-run-vector-tests == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run integration tests
        run: yarn test:vector:integration
        env:
          CI: true
          NODE_ENV: test

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vector-integration-test-results
          path: test-output/
          retention-days: 7

  vector-performance-tests:
    name: Vector Database Performance Tests
    needs: validate
    if: needs.validate.outputs.should-run-vector-tests == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run performance benchmarks
        run: yarn test:vector:performance
        env:
          CI: true
          NODE_ENV: test
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vector-performance-test-results
          path: test-output/
          retention-days: 30

  vector-regression-tests:
    name: Vector Database Regression Tests
    needs: validate
    if: needs.validate.outputs.should-run-vector-tests == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run regression tests
        run: yarn test:vector:regression
        env:
          CI: true
          NODE_ENV: test

      - name: Upload regression test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vector-regression-test-results
          path: test-output/
          retention-days: 30

  # ========================
  # BUILD JOBS (Main + Release)
  # ========================

  build:
    name: Build Artifacts
    needs: [validate, unit-tests]
    # Run on main branch pushes and releases
    if: |
      (needs.validate.outputs.is-main-push == 'true' || 
       needs.validate.outputs.is-release == 'true') &&
      (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      - name: Setup build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install python@3.11

      - name: Setup build tools (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build all packages
        run: yarn run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            packages/*/dist/
            packages/*/build/
          retention-days: 7

  # ============================
  # QUALITY GATE (All Contexts)
  # ============================

  quality-gates:
    name: Quality Gates
    needs: [validate, security-audit, unit-tests]
    # Always run quality gates (PR, main, release)
    if: always() && (github.event.pull_request.draft == false || github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - name: Check job results
        run: |
          echo "Validate result: ${{ needs.validate.result }}"
          echo "Security audit result: ${{ needs.security-audit.result }}"
          echo "Unit tests result: ${{ needs.unit-tests.result }}"

          if [[ "${{ needs.validate.result }}" != "success" ]]; then
            echo "❌ Code validation failed"
            exit 1
          fi

          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi

          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

          echo "✅ All quality gates passed!"

  # ================================
  # RELEASE JOBS (Release Events Only)
  # ================================

  prepare-release:
    name: Prepare Release
    needs: [validate, quality-gates, build]
    if: needs.validate.outputs.is-release == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: yarn run changelog:generate

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            CHANGELOG.md
            packages/*/package.json
          retention-days: 30

  deploy-npm:
    name: Deploy to NPM
    needs: [validate, prepare-release, integration-tests]
    if: needs.validate.outputs.is-release == 'true' && needs.integration-tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build packages
        run: yarn run build

      - name: Publish to NPM
        run: yarn run publish:npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-vscode:
    name: Deploy VS Code Extension
    needs: [validate, prepare-release, integration-tests]
    if: needs.validate.outputs.is-release == 'true' && needs.integration-tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_DEFAULT }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build VS Code extension
        run: yarn workspace @ast-copilot-helper/vscode-extension run build

      - name: Publish to VS Code Marketplace
        run: yarn workspace @ast-copilot-helper/vscode-extension run publish
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}

  # ================================
  # NOTIFICATION JOBS (Always)
  # ================================

  notify-completion:
    name: Notify Completion
    needs: [validate, quality-gates]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.quality-gates.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ CI/CD Pipeline completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ CI/CD Pipeline failed. Please check the logs." >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR (Success)
        if: github.event_name == 'pull_request' && steps.status.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **CI/CD Pipeline Passed!** All quality gates have been satisfied. This PR is ready for review.'
            });

      - name: Comment on PR (Failure)
        if: github.event_name == 'pull_request' && steps.status.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **CI/CD Pipeline Failed!** Please address the failing checks before this PR can be merged. Check the [Actions tab](../../actions) for detailed logs.'
            });

      - name: Send Slack notification (Main branch failures)
        if: github.ref == 'refs/heads/main' && steps.status.outputs.status == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            🚨 Main branch CI/CD failed!
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
