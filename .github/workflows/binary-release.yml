name: Binary Release

on:
  release:
    types: [published]
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

permissions:
  contents: write    # Required for creating releases and pushing tags
  packages: write    # Required for publishing packages
  actions: read      # Standard permission for accessing workflow information
  id-token: write    # Required for OIDC token generation (if needed for auth)

env:
  NODE_VERSION: "24"

jobs:
  build-binaries:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: linux-x64
          - os: macos-latest
            platform: darwin
            target: darwin-x64
          - os: windows-latest
            platform: win32
            target: win32-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --immutable
          npm install -g tsx
          echo "✅ Dependencies installed"

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          yarn build:all || yarn build
          echo "✅ Project build completed"
          
          # Verify packages were built
          echo "📂 Checking packages directory:"
          node -e "const fs = require('fs'); const path = require('path'); try { const packages = fs.readdirSync('packages'); packages.forEach(pkg => { const distPath = path.join('packages', pkg, 'dist'); if (fs.existsSync(distPath)) { console.log('✅ Found dist for:', pkg); } else { console.log('⚠️ Missing dist for:', pkg); } }); } catch(e) { console.log('⚠️ Some package dist directories missing'); }"

      - name: Build binary for ${{ matrix.platform }}
        run: |
          echo "🔨 Building binary for ${{ matrix.platform }}"
          echo "🔍 Current working directory: $(node -e 'console.log(process.cwd())')"
          echo "📂 Directory contents before build:"
          node -e "console.log(require('fs').readdirSync('.').join('\n'))"
          
          # Verify prerequisite files exist
          echo "🔍 Checking for CLI module at packages/ast-helper/dist/cli.js:"
          if [ -f "packages/ast-helper/dist/cli.js" ]; then
            echo "✅ CLI module found"
            head -5 packages/ast-helper/dist/cli.js
          else
            echo "❌ CLI module missing - trying to list dist contents:"
            if [ -d "packages/ast-helper/dist" ]; then
              node -e "console.log(require('fs').readdirSync('packages/ast-helper/dist').join('\n'))"
            else
              echo "❌ packages/ast-helper/dist directory does not exist"
            fi
          fi
          
          # Ensure output directory exists
          node -e "const fs = require('fs'); fs.mkdirSync('dist/binaries', { recursive: true }); console.log('Created dist/binaries directory');"
          
          yarn build:binary:${{ matrix.platform }}
          
          echo "📂 Directory contents after build:"
          node -e "const fs = require('fs'); try { console.log(fs.readdirSync('dist/binaries').join('\n')); } catch(e) { console.log('❌ dist/binaries directory not created'); }"

      - name: Verify binary
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "win32" ]; then
            BINARY_PATH="dist/binaries/ast-copilot-helper-${{ matrix.target }}.exe"
          else
            BINARY_PATH="dist/binaries/ast-copilot-helper-${{ matrix.target }}"
          fi
          
          echo "🔍 Looking for binary at: $BINARY_PATH"
          echo "📂 Contents of dist directory:"
          node -e "const fs = require('fs'); try { console.log(fs.readdirSync('dist').join('\n')); } catch(e) { console.log('dist directory does not exist'); }"
          
          if [ -d "dist/binaries" ]; then
            echo "📂 Contents of dist/binaries:"
            node -e "console.log(require('fs').readdirSync('dist/binaries').join('\n'));"
          else
            echo "❌ dist/binaries directory does not exist"
          fi
          
          if [ -f "$BINARY_PATH" ]; then
            echo "✅ Binary created: $BINARY_PATH"
            ls -lh "$BINARY_PATH"
            
            # Test binary can be executed (basic smoke test)
            if [ "${{ matrix.platform }}" = "win32" ]; then
              echo "🧪 Testing Windows binary execution:"
              "$BINARY_PATH" --version || echo "⚠️ Binary execution test failed"
            else
              echo "🧪 Testing Unix binary execution:"
              chmod +x "$BINARY_PATH"
              "$BINARY_PATH" --version || echo "⚠️ Binary execution test failed"
            fi
          else
            echo "❌ Binary not found at: $BINARY_PATH"
            exit 1
          fi

      - name: Create archive
        shell: bash
        run: |
          cd dist/binaries
          if [ "${{ matrix.platform }}" = "win32" ]; then
            BINARY_NAME="ast-copilot-helper-${{ matrix.target }}.exe"
            ARCHIVE_NAME="ast-copilot-helper-${{ matrix.target }}.zip"
            zip "$ARCHIVE_NAME" "$BINARY_NAME"
          else
            BINARY_NAME="ast-copilot-helper-${{ matrix.target }}"
            ARCHIVE_NAME="ast-copilot-helper-${{ matrix.target }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" "$BINARY_NAME"
          fi
          
          echo "✅ Archive created: $ARCHIVE_NAME"
          ls -lh "$ARCHIVE_NAME"

      - name: Generate checksums
        shell: bash
        run: |
          cd dist/binaries
          if [ "${{ matrix.platform }}" = "win32" ]; then
            ARCHIVE_NAME="ast-copilot-helper-${{ matrix.target }}.zip"
          else
            ARCHIVE_NAME="ast-copilot-helper-${{ matrix.target }}.tar.gz"
          fi
          
          # Generate SHA256 checksum
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$ARCHIVE_NAME" > "$ARCHIVE_NAME.sha256"
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$ARCHIVE_NAME" > "$ARCHIVE_NAME.sha256"
          else
            echo "⚠️ No SHA256 tool available"
          fi
          
          echo "Checksum file contents:"
          cat "$ARCHIVE_NAME.sha256" || echo "No checksum file created"

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            dist/binaries/ast-copilot-helper-${{ matrix.target }}*
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          node -e "require('fs').mkdirSync('./release-assets', { recursive: true }); console.log('Created release-assets directory');"
          
          # Copy all binary archives and checksums
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            function findFiles(dir, extensions) {
              const files = [];
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                  files.push(...findFiles(fullPath, extensions));
                } else if (extensions.some(ext => entry.name.endsWith(ext))) {
                  files.push(fullPath);
                }
              }
              return files;
            }
            
            try {
              const files = findFiles('./artifacts', ['.zip', '.tar.gz', '.sha256']);
              files.forEach(file => {
                const dest = path.join('./release-assets', path.basename(file));
                fs.copyFileSync(file, dest);
                console.log('Copied:', file, '->', dest);
              });
            } catch(e) {
              console.log('Error copying files:', e.message);
            }
          "
          
          echo "Release assets:"
          node -e "console.log(require('fs').readdirSync('./release-assets').join('\n'));"

      - name: Generate release notes
        id: release-notes
        run: |
          cat > release-notes.md << EOF
          ## AST Copilot Helper Release
          
          ### Binary Downloads
          
          | Platform | Architecture | Download | SHA256 |
          |----------|-------------|----------|---------|
          | Linux | x64 | [ast-copilot-helper-linux-x64.tar.gz](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-linux-x64.tar.gz) | [checksum](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-linux-x64.tar.gz.sha256) |
          | macOS | x64 | [ast-copilot-helper-darwin-x64.tar.gz](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-darwin-x64.tar.gz) | [checksum](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-darwin-x64.tar.gz.sha256) |
          | Windows | x64 | [ast-copilot-helper-win32-x64.zip](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-win32-x64.zip) | [checksum](https://github.com/\${{ github.repository }}/releases/download/\${{ github.ref_name }}/ast-copilot-helper-win32-x64.zip.sha256) |
          
          ### Installation
          
          #### Quick Install (Unix/Linux/macOS)
          \`\`\`bash
          curl -fsSL https://raw.githubusercontent.com/\${{ github.repository }}/main/scripts/install.sh | bash
          \`\`\`
          
          #### Quick Install (Windows PowerShell)
          \`\`\`powershell
          irm https://raw.githubusercontent.com/\${{ github.repository }}/main/scripts/install.ps1 | iex
          \`\`\`
          
          #### Package Managers
          
          **Homebrew (macOS/Linux):**
          \`\`\`bash
          brew install your-org/tap/ast-copilot-helper
          \`\`\`
          
          **Chocolatey (Windows):**
          \`\`\`powershell
          choco install ast-copilot-helper
          \`\`\`
          
          **Snap (Linux):**
          \`\`\`bash
          sudo snap install ast-copilot-helper
          \`\`\`
          
          ### Verification
          
          After installation, verify with:
          \`\`\`bash
          ast-copilot-helper --version
          \`\`\`
          
          ### Docker
          
          \`\`\`bash
          docker run ghcr.io/your-org/ast-copilot-helper:latest --help
          \`\`\`
          
          EOF

      - name: Upload assets to release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./release-assets/*
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-package-managers:
    name: Update Package Manager Configs
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get release info
        id: release
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Update checksums in package configs
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          echo "Updating package manager configs for version: $VERSION"
          
          # Download checksums from the release
          node -e "const path = require('path'); const fs = require('fs'); const tmpDir = path.join(require('os').tmpdir(), 'checksums'); fs.mkdirSync(tmpDir, { recursive: true }); console.log('Created checksums directory at:', tmpDir);"
          
          # Note: In a real implementation, you would:
          # 1. Download the actual checksum files from the release
          # 2. Update Homebrew formula, Chocolatey nuspec, etc.
          # 3. Submit PRs to respective package manager repositories
          
          echo "TODO: Implement package manager updates"
          echo "- Update Homebrew formula with new SHA256"
          echo "- Update Chocolatey package with new checksum" 
          echo "- Submit to package manager repositories"

  build-containers:
    name: Build and Push Container Images  
    runs-on: ubuntu-latest
    needs: build-binaries
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-x64
          path: ./binary

      - name: Extract binary
        run: |
          cd binary
          tar -xzf ast-copilot-helper-linux-x64.tar.gz
          mv ast-copilot-helper-linux-x64 ast-copilot-helper
          chmod +x ast-copilot-helper

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./distribution/docker/Dockerfile.binary
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max