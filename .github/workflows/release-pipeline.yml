name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      channels:
        description: "Distribution channels"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - npm-only
          - binaries-only
          - github-only
          - docker-only
      dry_run:
        description: "Perform dry run (validation only)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "24"
  REGISTRY_URL: "https://registry.npmjs.org"

jobs:
  # ===============================
  # VALIDATION AND PREPARATION
  # ===============================
  
  validate:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.validation.outputs.should-continue }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --frozen-lockfile

      - name: Run basic validation
        id: validation
        run: |
          echo "🔍 Running basic validation..."
          
          # Type checking
          echo "🔧 Type checking..."
          yarn typecheck || exit 1
          
          # Run essential tests
          echo "🧪 Running essential tests..."
          yarn test:unit || exit 1
          
          # Build validation
          echo "🏗️ Build validation..."
          yarn build || exit 1
          
          echo "should-continue=true" >> $GITHUB_OUTPUT
          echo "✅ Basic validation passed"

  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-continue == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-no-v: ${{ steps.version.outputs.version-no-v }}
      channels: ${{ steps.channels.outputs.channels }}
      should-publish: ${{ steps.check.outputs.should-publish }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      is-dry-run: ${{ steps.check.outputs.is-dry-run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
              echo "❌ Invalid version format: $VERSION"
              exit 1
            fi
            # Ensure version starts with 'v'
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            echo "❌ Unexpected event: ${{ github.event_name }}"
            exit 1
          fi
          
          VERSION_NO_V="${VERSION#v}"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version-no-v=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "📋 Release version: $VERSION (npm: $VERSION_NO_V)"
          
          # Check if prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "🚧 This is a pre-release version"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine distribution channels
        id: channels
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CHANNELS="${{ github.event.inputs.channels }}"
          else
            CHANNELS="all"
          fi
          
          echo "channels=$CHANNELS" >> $GITHUB_OUTPUT
          echo "📢 Distribution channels: $CHANNELS"

      - name: Check publish readiness
        id: check
        run: |
          echo "🔍 Checking publish readiness..."
          
          # Check if this is a dry run
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "is-dry-run=true" >> $GITHUB_OUTPUT
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "� Dry run mode - no actual publishing"
            exit 0
          fi
          
          echo "is-dry-run=false" >> $GITHUB_OUTPUT
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "✅ Ready for publishing"

  # ===============================
  # BUILD CROSS-PLATFORM BINARIES
  # ===============================

  build-binaries:
    name: Build Binaries (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: [prepare]
    if: |
      needs.prepare.outputs.is-dry-run == 'false' && 
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'binaries-only')
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: linux-x64
          - os: macos-latest
            platform: darwin
            target: darwin-x64
          - os: windows-latest
            platform: win32
            target: win32-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Rust (for WASM)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --frozen-lockfile
          
      - name: Install Windows-specific build tools (Windows only)
        if: matrix.platform == 'win32'
        run: |
          echo "🔧 Installing Windows-specific build tools..."
          # Ensure postject is available
          npm install -g postject@latest
          echo "✅ Postject installed successfully"
          # Verify postject is available (it doesn't have --version flag)
          npx postject --help > /dev/null 2>&1 && echo "✅ Postject is working" || echo "⚠️ Postject help not available"
          
      - name: Test Node.js SEA functionality (Windows only)
        if: matrix.platform == 'win32'
        shell: bash
        run: |
          echo "🧪 Testing Node.js SEA functionality..."
          echo "Node.js version: $(node --version)"
          echo "Testing SEA config parsing..."
          
          # Create a simple test
          mkdir -p test-sea
          echo 'console.log("Hello SEA");' > test-sea/test.js
          echo '{"main":"test.js","output":"test.blob","disableExperimentalSEAWarning":true}' > test-sea/sea-config.json
          
          cd test-sea
          echo "Running: node --experimental-sea-config sea-config.json"
          node --experimental-sea-config sea-config.json || {
            echo "❌ SEA functionality test failed"
            echo "This might indicate an issue with Node.js SEA support in this environment"
          }
          
          if [ -f "test.blob" ]; then
            echo "✅ SEA blob creation works"
            ls -la test.blob
          else
            echo "❌ SEA blob was not created"
          fi
          
          cd ..
          rm -rf test-sea

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          yarn build

      - name: Build binary for ${{ matrix.platform }}
        run: |
          echo "🔨 Building binary for ${{ matrix.platform }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "OS: ${{ runner.os }}"
          echo "Node.js executable: $(which node)"
          echo "Working directory: $(pwd)"
          
          # Ensure the CLI module is built
          if [ ! -f "packages/ast-helper/dist/cli.js" ]; then
            echo "❌ CLI module not found, rebuilding..."
            yarn build
          fi
          
          # Build the binary with verbose output
          set -e  # Exit on any error
          yarn build:binary:${{ matrix.platform }} || {
            echo "❌ Binary build failed with exit code $?"
            echo "📋 Current directory contents:"
            ls -la
            echo "📋 Dist directory contents (if exists):"
            [ -d "dist" ] && find dist -type f || echo "dist directory not found"
            exit 1
          }

      - name: Debug binary build results
        shell: bash
        run: |
          echo "🔍 Debugging binary build results for ${{ matrix.platform }}"
          echo "Working directory: $(pwd)"
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Yarn version: $(yarn --version)"
          echo ""
          echo "📂 Contents of dist directory:"
          if [ -d "dist" ]; then
            find dist -type f -name "*" | head -20
          else
            echo "dist directory does not exist"
          fi
          echo ""
          echo "📂 Contents of dist/binaries directory:"
          if [ -d "dist/binaries" ]; then
            ls -la dist/binaries/
          else
            echo "dist/binaries directory does not exist"
          fi
          echo ""
          echo "🔍 Searching for any files containing 'ast-copilot-helper':"
          find . -name "*ast-copilot-helper*" -type f 2>/dev/null | head -10 || echo "No files found"

      - name: Verify and prepare binary
        shell: bash
        run: |
          echo "🔍 Verifying binary for ${{ matrix.platform }}"
          
          # Create binaries directory if it doesn't exist
          mkdir -p dist/binaries
          
          # Expected binary paths based on platform
          if [ "${{ matrix.platform }}" = "win32" ]; then
            EXPECTED_BINARY="dist/binaries/ast-copilot-helper-${{ matrix.target }}.exe"
          else
            EXPECTED_BINARY="dist/binaries/ast-copilot-helper-${{ matrix.target }}"
          fi
          
          # Check if binary exists
          if [ -f "$EXPECTED_BINARY" ]; then
            echo "✅ Binary found at: $EXPECTED_BINARY"
            ls -la "$EXPECTED_BINARY"
            
            # Make executable on non-Windows
            if [ "${{ runner.os }}" != "Windows" ]; then
              chmod +x "$EXPECTED_BINARY"
            fi
            
            # Get file size
            SIZE=$(stat -c%s "$EXPECTED_BINARY" 2>/dev/null || stat -f%z "$EXPECTED_BINARY" 2>/dev/null || echo "unknown")
            echo "📊 Binary size: $SIZE bytes"
          else
            echo "❌ Binary not found at expected location: $EXPECTED_BINARY"
            echo "📋 Directory contents:"
            find dist -name "*ast-copilot-helper*" -type f 2>/dev/null || echo "No binaries found"
            exit 1
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            dist/binaries/*
          retention-days: 30

  # ===============================
  # NPM PUBLISHING
  # ===============================

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [prepare]
    if: |
      needs.prepare.outputs.should-publish == 'true' && 
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'npm-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --frozen-lockfile

      - name: Build for publishing
        run: |
          echo "🏗️ Building for publishing..."
          yarn build

      - name: Update package version
        run: |
          echo "📝 Updating package.json version..."
          VERSION_NO_V="${{ needs.prepare.outputs.version-no-v }}"
          echo "Setting version to: $VERSION_NO_V"
          npm version "$VERSION_NO_V" --no-git-tag-version --allow-same-version

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📤 Publishing to npm..."
          VERSION_NO_V="${{ needs.prepare.outputs.version-no-v }}"
          
          # Check if we have npm token configured
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "⚠️ No NPM token configured, skipping npm publish"
            exit 0
          fi
          
          # Publish based on prerelease status
          if [ "${{ needs.prepare.outputs.is-prerelease }}" = "true" ]; then
            echo "🚧 Publishing pre-release to npm..."
            npm publish --tag beta --access public || echo "❌ npm publish failed"
          else
            echo "🚀 Publishing stable release to npm..."
            npm publish --access public || echo "❌ npm publish failed"
          fi
          
          echo "✅ npm publish completed for version $VERSION_NO_V"

  # ===============================
  # GITHUB RELEASE
  # ===============================

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-binaries]
    if: |
      always() && !failure() && !cancelled() &&
      needs.prepare.outputs.is-dry-run == 'false' && 
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'github-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: binary-*
          merge-multiple: true

      - name: Prepare release assets
        run: |
          echo "📦 Preparing release assets..."
          mkdir -p release-assets
          
          # Copy binaries and create checksums
          find artifacts -name "ast-copilot-helper-*" -type f | while read binary; do
            if [ -f "$binary" ]; then
              echo "📄 Adding: $binary"
              cp "$binary" release-assets/
              # Create checksum
              basename_binary=$(basename "$binary")
              if command -v sha256sum >/dev/null; then
                sha256sum "$binary" | sed "s|$binary|$basename_binary|" >> release-assets/checksums.txt
              elif command -v shasum >/dev/null; then
                shasum -a 256 "$binary" | sed "s|$binary|$basename_binary|" >> release-assets/checksums.txt
              fi
            fi
          done
          
          # List assets
          echo "📋 Release assets:"
          ls -la release-assets/

      - name: Generate release body
        id: release-body
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          echo "Generating release notes for $VERSION"
          
          cat > release-body.txt << EOF
          ## 🚀 Release $VERSION
          
          ### Installation
          
          **Via npm:**
          \`\`\`bash
          npm install -g ast-copilot-helper@${{ needs.prepare.outputs.version-no-v }}
          \`\`\`
          
          **Via binary download:**
          Download the appropriate binary for your platform from the assets below.
          
          ### Available Binaries
          - **Windows**: \`ast-copilot-helper-win32-x64.exe\`
          - **macOS**: \`ast-copilot-helper-darwin-x64\`
          - **Linux**: \`ast-copilot-helper-linux-x64\`
          
          See \`checksums.txt\` for file verification.
          
          ---
          
          **Full Changelog**: https://github.com/EvanDodds/ast-copilot-helper/compare/v1.4.0...$VERSION
          EOF

      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.version }}
          name: "Release ${{ needs.prepare.outputs.version }}"
          bodyFile: "release-body.txt"
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is-prerelease }}
          allowUpdates: true
          replacesArtifacts: true
          generateReleaseNotes: false

  # ===============================
  # DOCKER IMAGES
  # ===============================

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [prepare]
    if: |
      needs.prepare.outputs.is-dry-run == 'false' && 
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'docker-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "🧪 Testing Docker image..."
          VERSION="${{ needs.prepare.outputs.version }}"
          timeout 30s docker run --rm ghcr.io/${{ github.repository }}:$VERSION --help || echo "Docker test completed"

  # ===============================
  # POST-RELEASE SUMMARY
  # ===============================

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [prepare, publish-npm, create-github-release, build-docker]
    if: always() && !cancelled()
    
    steps:
      - name: Release summary
        run: |
          echo "🎉 Release Pipeline Summary"
          echo "=========================="
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Channels: ${{ needs.prepare.outputs.channels }}"
          echo "Dry Run: ${{ needs.prepare.outputs.is-dry-run }}"
          echo ""
          
          # Individual job results
          echo "📋 Job Results:"
          echo "• NPM Publish: ${{ needs.publish-npm.result || 'skipped' }}"
          echo "• GitHub Release: ${{ needs.create-github-release.result || 'skipped' }}"
          echo "• Docker Build: ${{ needs.build-docker.result || 'skipped' }}"
          echo ""
          
          # Overall status
          if [ "${{ needs.prepare.outputs.is-dry-run }}" = "true" ]; then
            echo "🔍 Dry run completed - no publishing performed"
          else
            echo "🚀 Release pipeline completed"
          fi