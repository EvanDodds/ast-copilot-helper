/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration for batch processing */
export interface EngineConfig {
  maxMemoryMb: number;
  batchSize: number;
  parallelWorkers: number;
  vectorDimensions: number;
  indexEfConstruction: number;
  indexM: number;
  maxDepth: number;
  includeUnnamedNodes: boolean;
  maxNodeLength: number;
  enableCaching: boolean;
}

/** HNSW index configuration */
export interface HnswConfig {
  vectorDimensions: number;
  indexEfConstruction: number;
  indexM: number;
}

/** Processing error information */
export interface ProcessingError {
  filePath: string;
  message: string;
  errorType: string;
  line?: number;
  column?: number;
}

/** Node metadata for AST nodes */
export interface NodeMetadata {
  language: string;
  scope: string[];
  modifiers: string[];
  imports: string[];
  exports: string[];
  docstring?: string;
  annotations: string[];
  languageSpecific?: Record<string, any>;
  // Additional properties used by semantic processor
  nodeId: string;
  filePath: string;
  signature?: string;
  summary?: string;
  sourceSnippet?: string;
  complexity?: number;
}

/** Batch processing result */
export interface BatchResult {
  processedFiles: number;
  totalNodes: number;
  processingTimeMs: number;
  memoryPeakMb: number;
  errors: ProcessingError[];
}

/** Main AST Core Engine API class */
export declare class AstCoreEngineApi {
  /** Create a new engine instance with the given configuration */
  constructor(config: EngineConfig);

  /** Initialize the engine */
  initialize(): Promise<void>;

  /** Process a batch of files */
  processBatch(filePaths: string[], config: EngineConfig): Promise<BatchResult>;

  /** Search for similar nodes using semantic search */
  searchSimilar(
    queryText: string,
    maxResults?: number,
  ): Promise<NodeMetadata[]>;
}

/** Create a default engine instance */
export declare function createDefaultEngine(): Promise<AstCoreEngineApi>;

// Vector Database Types (for compatibility)
// Note: These may not be fully implemented in current NAPI bindings

/** Configuration for vector database */
export interface VectorDbConfig {
  embeddingDimension: number;
  maxElements: number;
  efConstruction: number;
  m: number;
  efSearch?: number;
}

/** Vector metadata structure */
export interface VectorMetadata {
  node_id: string;
  file_path: string;
  node_type: string;
  signature: string;
  language: string;
  embedding_model: string;
  timestamp: number;
}

/** Vector search result */
export interface VectorSearchResult {
  node_id: string;
  distance: number;
}

// Vector Database Functions (stubs for compatibility)
// Note: These may not be fully implemented in current NAPI bindings

export declare function initVectorDatabase(config: VectorDbConfig): string;
export declare function addVectorToDb(
  nodeId: string,
  embeddingJson: string,
  metadata: VectorMetadata,
): string;
export declare function searchVectors(
  embeddingJson: string,
  k: number,
  efSearch?: number,
): VectorSearchResult[];
export declare function getVectorCount(): number;
export declare function clearVectorDatabase(): string;
