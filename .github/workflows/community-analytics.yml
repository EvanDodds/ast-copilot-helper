name: Community Analytics

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      timeframe:
        description: "Analysis timeframe (7, 30, or 90 days)"
        required: false
        default: "30"
        type: choice
        options:
          - "7"
          - "30"
          - "90"
      force_run:
        description: "Force run even if recent data exists"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: read
  issues: read
  discussions: read

jobs:
  generate-analytics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install @octokit/rest

      - name: Run community analytics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create analytics output directory
          mkdir -p ./analytics-output

          # Set timeframe from input or default to multiple timeframes
          if [ "${{ github.event.inputs.timeframe }}" != "" ]; then
            TIMEFRAMES="${{ github.event.inputs.timeframe }}"
          else
            TIMEFRAMES="7 30 90"
          fi

          echo "Running analytics for timeframes: $TIMEFRAMES"

          # Run analytics for each timeframe
          for timeframe in $TIMEFRAMES; do
            echo "🔍 Generating ${timeframe}-day analytics..."
            
            node scripts/analytics/community-analytics.mjs \
              "${{ github.repository_owner }}" \
              "${{ github.event.repository.name }}" \
              "$timeframe" \
              "./analytics-output/${timeframe}d"
              
            if [ $? -eq 0 ]; then
              echo "✅ ${timeframe}-day analytics completed"
            else
              echo "❌ ${timeframe}-day analytics failed"
              exit 1
            fi
          done

      - name: Run scheduled analytics (full suite)
        if: github.event_name == 'schedule'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Running full scheduled analytics suite..."

          node scripts/analytics/analytics-scheduler.mjs \
            "${{ github.repository_owner }}" \
            "${{ github.event.repository.name }}" \
            "daily" \
            "./analytics-data"

      - name: Generate analytics summary
        run: |
          echo "# 📊 Community Analytics Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add summary for each timeframe
          for report in ./analytics-output/*/community-analytics.json; do
            if [ -f "$report" ]; then
              timeframe=$(basename $(dirname "$report"))
              echo "## ${timeframe} Analysis" >> $GITHUB_STEP_SUMMARY
              
              # Extract key metrics from JSON
              contributors=$(jq -r '.summary.communityGrowth.totalContributors // "N/A"' "$report")
              new_contributors=$(jq -r '.summary.communityGrowth.newContributors // "N/A"' "$report")
              issues_opened=$(jq -r '.summary.activity.issuesOpened // "N/A"' "$report")
              issues_closed=$(jq -r '.summary.activity.issuesClosed // "N/A"' "$report")
              prs_opened=$(jq -r '.summary.activity.pullRequestsOpened // "N/A"' "$report")
              prs_merged=$(jq -r '.summary.activity.pullRequestsMerged // "N/A"' "$report")
              stars=$(jq -r '.summary.engagement.stars // "N/A"' "$report")
              
              echo "- **Contributors:** $contributors (+$new_contributors new)" >> $GITHUB_STEP_SUMMARY
              echo "- **Issues:** $issues_opened opened, $issues_closed closed" >> $GITHUB_STEP_SUMMARY
              echo "- **Pull Requests:** $prs_opened opened, $prs_merged merged" >> $GITHUB_STEP_SUMMARY
              echo "- **GitHub Stars:** $stars" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          # Add insights if available
          echo "## 💡 Key Insights" >> $GITHUB_STEP_SUMMARY
          for report in ./analytics-output/*/community-analytics.json; do
            if [ -f "$report" ]; then
              insights=$(jq -r '.insights[]? | "- " + .message + " (" + .category + ")"' "$report")
              if [ -n "$insights" ]; then
                echo "$insights" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

      - name: Upload analytics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: community-analytics-${{ github.run_number }}
          path: |
            analytics-output/
            analytics-data/
          retention-days: 90

      - name: Create or update analytics issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find the most recent analytics report
            let latestReport = null;
            let latestTimestamp = 0;

            try {
              const analyticsDir = './analytics-output';
              const subdirs = fs.readdirSync(analyticsDir, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory())
                .map(dirent => dirent.name);
                
              for (const subdir of subdirs) {
                const reportPath = path.join(analyticsDir, subdir, 'community-analytics.json');
                if (fs.existsSync(reportPath)) {
                  const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                  const timestamp = new Date(report.metadata.generatedAt).getTime();
                  
                  if (timestamp > latestTimestamp) {
                    latestTimestamp = timestamp;
                    latestReport = { ...report, timeframe: subdir };
                  }
                }
              }
            } catch (error) {
              console.log('Could not read analytics reports:', error.message);
              return;
            }

            if (!latestReport) {
              console.log('No analytics report found');
              return;
            }

            // Create issue body
            const { summary, insights, recommendations } = latestReport;

            // Format insights
            const insightsList = insights.map(insight => {
              const icon = insight.type === 'positive' ? '✅' : insight.type === 'warning' ? '⚠️' : '❌';
              return "- " + icon + " **" + insight.category + ":** " + insight.message + " (" + insight.impact + " impact)";
            });

            // Format recommendations
            const recommendationsList = recommendations.map(rec => {
              const details = rec.details.map(detail => "- " + detail).join('\n');
              return "### " + rec.action + " (" + rec.priority + " priority)\n" + details;
            });

            const issueBody = [
              "# 📊 Automated Community Analytics Report",
              "",
              "**Generated:** " + new Date(latestReport.metadata.generatedAt).toLocaleString(),
              "**Period:** " + latestReport.metadata.timeframe,
              "",
              "## Summary",
              "",
              "- **Contributors:** " + summary.communityGrowth.totalContributors + " (+" + summary.communityGrowth.newContributors + " new, " + summary.communityGrowth.growthRate + "% growth)",
              "- **Issues:** " + summary.activity.issuesOpened + " opened, " + summary.activity.issuesClosed + " closed (" + summary.engagement.issueCloseRate + "% close rate)",
              "- **Pull Requests:** " + summary.activity.pullRequestsOpened + " opened, " + summary.activity.pullRequestsMerged + " merged (" + summary.engagement.prMergeRate + "% merge rate)",
              "- **GitHub Stars:** " + summary.engagement.stars + " (+" + summary.engagement.forks + " forks)",
              "",
              "## Key Insights",
              "",
              ...insightsList,
              "",
              "## Recommendations",
              "",
              ...recommendationsList,
              "",
              "---",
              "",
              "*This is an automated report. Data may take time to reflect recent changes.*",
              "*View full analytics: [GitHub Actions](https://github.com/${{ github.repository }}/actions)*"
            ].join('\n');

            // Look for existing analytics issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['analytics', 'automated'],
              state: 'open'
            });

            const existingIssue = issues.find(issue => 
              issue.title.includes('Community Analytics Report')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: `📊 Community Analytics Report - ${new Date().toLocaleDateString()}`,
                body: issueBody
              });
              
              console.log(`Updated analytics issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📊 Community Analytics Report - ${new Date().toLocaleDateString()}`,
                body: issueBody,
                labels: ['analytics', 'automated', 'community']
              });
              
              console.log(`Created analytics issue #${newIssue.number}`);
            }

      - name: Post analytics to discussions (if enabled)
        if: github.event_name == 'schedule'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            // This would post to GitHub Discussions if GraphQL API was configured
            // For now, we'll just log that this step would happen
            console.log('Would post analytics summary to GitHub Discussions');

      - name: Cleanup old artifacts
        run: |
          echo "🧹 Cleaning up old analytics files..."

          # Keep only last 30 days of data
          find ./analytics-output -type d -name "20*" -mtime +30 -exec rm -rf {} \; 2>/dev/null || true
          find ./analytics-data -type d -name "20*" -mtime +30 -exec rm -rf {} \; 2>/dev/null || true

          echo "Cleanup completed"

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: generate-analytics
    if: failure()

    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = [
              "# ❌ Community Analytics Generation Failed",
              "",
              "**Workflow:** ${{ github.workflow }}",
              "**Run:** #${{ github.run_number }}",
              "**Triggered by:** ${{ github.event_name }}",
              "**Time:** " + new Date().toLocaleString(),
              "",
              "## Error Details",
              "",
              "The automated community analytics generation failed. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.",
              "",
              "## Next Steps",
              "",
              "1. Check the workflow logs for specific error messages",
              "2. Verify GitHub token permissions", 
              "3. Check if repository structure has changed",
              "4. Manually run analytics if needed",
              "",
              "## Manual Run",
              "",
              "You can manually trigger analytics generation:",
              "",
              "```bash",
              "# Install dependencies",
              "npm install @octokit/rest",
              "",
              "# Run analytics (requires GITHUB_TOKEN)",
              'export GITHUB_TOKEN="your_token"',
              "node scripts/analytics/community-analytics.mjs owner repo 30",
              "```",
              "",
              "---",
              "",
              "*This is an automated error report.*"
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Analytics Generation Failed - ${new Date().toLocaleDateString()}`,
              body: issueBody,
              labels: ['bug', 'analytics', 'automated', 'high-priority']
            });
