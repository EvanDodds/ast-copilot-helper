name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      channels:
        description: "Distribution channels"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - npm-only
          - binaries-only
          - github-only
          - docker-only
      environment:
        description: "Deployment environment"
        required: false
        default: "production"
        type: choice
        options:
          - staging
          - production
      dry_run:
        description: "Perform dry run (validation only)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write    # Required for creating releases and pushing tags
  packages: write    # Required for publishing packages
  actions: read      # Standard permission for accessing workflow information
  id-token: write    # Required for OIDC token generation

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "24"
  REGISTRY_URL: "https://registry.npmjs.org"
  RELEASE_TIMEOUT: "45m"

jobs:
  # ===============================
  # VALIDATION (Reuse CI Pipeline)  
  # ===============================
  
  validate:
    name: Pre-Release Validation
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    with:
      skip-nightly: true  # Skip nightly-only jobs for releases

  # ===============================
  # PREPARE RELEASE METADATA
  # ===============================

  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}
      channels: ${{ steps.channels.outputs.channels }}
      should-publish: ${{ steps.check.outputs.should-publish }}
      release-notes: ${{ steps.notes.outputs.release-notes }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
              echo "❌ Invalid version format: $VERSION"
              exit 1
            fi
            # Ensure version starts with 'v'
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Release version: $VERSION"
          
          # Check if prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "🚧 This is a pre-release version"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine distribution channels
        id: channels
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CHANNELS="${{ github.event.inputs.channels }}"
          else
            CHANNELS="all"
          fi
          
          echo "channels=$CHANNELS" >> $GITHUB_OUTPUT
          echo "📢 Distribution channels: $CHANNELS"

      - name: Check publish readiness
        id: check
        run: |
          echo "🔍 Checking publish readiness..."
          
          # Check if this is a dry run (only for workflow_dispatch events)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "🔍 Dry run mode - no actual publishing"
            exit 0
          fi
          
          # Check if version already exists on npm
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          if npm view "ast-copilot-helper@$VERSION_NO_V" version 2>/dev/null; then
            echo "⚠️ Version $VERSION_NO_V already published to npm"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version $VERSION_NO_V ready for publishing"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "📝 Generating release notes for $VERSION"
          
          # Create comprehensive release notes
          cat > release-notes.md << 'EOF'
          ## 🚀 Release ${{ steps.version.outputs.version }}
          
          ### What's New
          
          **Automated release generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')**
          
          ### 📦 Distribution Channels
          - **npm**: `npm install -g ast-copilot-helper@${{ steps.version.outputs.version }}`
          - **GitHub Releases**: Download binaries for your platform
          - **Docker**: `docker pull ghcr.io/evandodds/ast-copilot-helper:${{ steps.version.outputs.version }}`
          
          ### 🏗️ Available Binaries
          - **Windows**: `ast-copilot-helper-win32-x64.exe`
          - **macOS**: `ast-copilot-helper-darwin-x64`
          - **Linux**: `ast-copilot-helper-linux-x64`
          
          ### 📋 Installation
          
          **Via npm (recommended):**
          ```bash
          npm install -g ast-copilot-helper@${{ steps.version.outputs.version }}
          ```
          
          **Via binary download:**
          1. Download the appropriate binary for your platform from the release assets
          2. Make it executable: `chmod +x ast-copilot-helper-*`
          3. Run: `./ast-copilot-helper-* --help`
          
          ### 🔧 System Requirements
          - Node.js 20+ (for npm installation)
          - No additional dependencies for binary installation
          
          ---
          
          **Full Changelog**: https://github.com/EvanDodds/ast-copilot-helper/compare/previous-version...${{ steps.version.outputs.version }}
          EOF
          
          # Convert to single line for GitHub output
          RELEASE_NOTES=$(cat release-notes.md | tr '\n' '\r')
          echo "release-notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          
          echo "✅ Release notes generated"

  # ===============================
  # BUILD CROSS-PLATFORM BINARIES
  # ===============================

  build-binaries:
    name: Build Binaries (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: [validate, prepare]
    if: needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'binaries-only'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: linux-x64
          - os: macos-latest
            platform: darwin
            target: darwin-x64
          - os: windows-latest
            platform: win32
            target: win32-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Rust (for WASM)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --frozen-lockfile

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          yarn build

      - name: Build binary for ${{ matrix.platform }}
        run: |
          echo "🔨 Building binary for ${{ matrix.platform }}"
          yarn build:binary:${{ matrix.platform }}

      - name: Verify binary
        shell: bash
        run: |
          echo "🔍 Verifying binary for ${{ matrix.platform }}"
          
          if [ "${{ matrix.platform }}" = "win32" ]; then
            BINARY_PATH="dist/binaries/ast-copilot-helper-${{ matrix.target }}.exe"
          else
            BINARY_PATH="dist/binaries/ast-copilot-helper-${{ matrix.target }}"
          fi
          
          if [ ! -f "$BINARY_PATH" ]; then
            echo "❌ Binary not found at: $BINARY_PATH"
            ls -la dist/binaries/ || echo "dist/binaries directory not found"
            exit 1
          fi
          
          # Check file type
          file "$BINARY_PATH" || true
          
          # Get file size
          SIZE=$(stat -f%z "$BINARY_PATH" 2>/dev/null || stat -c%s "$BINARY_PATH" 2>/dev/null || echo "unknown")
          echo "📊 Binary size: $SIZE bytes"
          
          # Test execution (basic help)
          if [ "${{ runner.os }}" = "Windows" ]; then
            "./$BINARY_PATH" --version || echo "Binary execution test failed"
          else
            chmod +x "$BINARY_PATH"
            "./$BINARY_PATH" --version || echo "Binary execution test failed"
          fi
          
          echo "✅ Binary verification completed"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            dist/binaries/ast-copilot-helper-${{ matrix.target }}*
            dist/binaries/build-manifest.json
          retention-days: 30

  # ===============================
  # NPM PUBLISHING
  # ===============================

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [validate, prepare]
    if: |
      needs.prepare.outputs.should-publish == 'true' && 
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'npm-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          yarn install --frozen-lockfile

      - name: Build for publishing
        run: |
          echo "🏗️ Building for publishing..."
          yarn build

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📤 Publishing to npm..."
          VERSION="${{ needs.prepare.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Update package.json version
          npm version "$VERSION_NO_V" --no-git-tag-version
          
          # Publish based on prerelease status
          if [ "${{ needs.prepare.outputs.is-prerelease }}" = "true" ]; then
            echo "🚧 Publishing pre-release to npm..."
            npm publish --tag beta --access public
          else
            echo "🚀 Publishing stable release to npm..."
            npm publish --access public
          fi
          
          echo "✅ Published ast-copilot-helper@$VERSION_NO_V to npm"

  # ===============================
  # GITHUB RELEASE
  # ===============================

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, prepare, build-binaries]
    if: |
      always() && !failure() && !cancelled() &&
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'github-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: binary-*
          merge-multiple: true

      - name: Prepare release assets
        run: |
          echo "📦 Preparing release assets..."
          mkdir -p release-assets
          
          # Copy binaries and create checksums
          for binary in artifacts/ast-copilot-helper-*; do
            if [ -f "$binary" ]; then
              cp "$binary" release-assets/
              # Create checksum
              if command -v sha256sum >/dev/null; then
                sha256sum "$binary" >> release-assets/checksums.txt
              elif command -v shasum >/dev/null; then
                shasum -a 256 "$binary" >> release-assets/checksums.txt
              fi
            fi
          done
          
          # List assets
          echo "📋 Release assets:"
          ls -la release-assets/

      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.version }}
          name: "Release ${{ needs.prepare.outputs.version }}"
          body: ${{ needs.prepare.outputs.release-notes }}
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is-prerelease }}
          allowUpdates: true
          replacesArtifacts: true
          generateReleaseNotes: true

  # ===============================
  # DOCKER IMAGES
  # ===============================

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate, prepare, build-binaries]
    if: |
      always() && !failure() && !cancelled() &&
      (needs.prepare.outputs.channels == 'all' || needs.prepare.outputs.channels == 'docker-only')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "🧪 Testing Docker image..."
          VERSION="${{ needs.prepare.outputs.version }}"
          docker run --rm ghcr.io/${{ github.repository }}:$VERSION --help

  # ===============================
  # POST-RELEASE NOTIFICATIONS
  # ===============================

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [prepare, publish-npm, create-github-release, build-docker]
    if: always() && !cancelled()
    
    steps:
      - name: Determine success status
        id: status
        run: |
          NPM_STATUS="${{ needs.publish-npm.result }}"
          GITHUB_STATUS="${{ needs.create-github-release.result }}"
          DOCKER_STATUS="${{ needs.build-docker.result }}"
          
          # Count successes
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          
          if [ "${{ needs.prepare.outputs.channels }}" = "all" ] || [ "${{ needs.prepare.outputs.channels }}" = "npm-only" ]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [ "$NPM_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [ "${{ needs.prepare.outputs.channels }}" = "all" ] || [ "${{ needs.prepare.outputs.channels }}" = "github-only" ]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [ "$GITHUB_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [ "${{ needs.prepare.outputs.channels }}" = "all" ] || [ "${{ needs.prepare.outputs.channels }}" = "docker-only" ]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [ "$DOCKER_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          echo "success-count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "total-count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          
          if [ $SUCCESS_COUNT -eq $TOTAL_COUNT ]; then
            echo "overall-status=success" >> $GITHUB_OUTPUT
          elif [ $SUCCESS_COUNT -gt 0 ]; then
            echo "overall-status=partial" >> $GITHUB_OUTPUT
          else
            echo "overall-status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Release summary
        run: |
          echo "🎉 Release Pipeline Summary"
          echo "=========================="
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Channels: ${{ needs.prepare.outputs.channels }}"
          echo "Success: ${{ steps.status.outputs.success-count }}/${{ steps.status.outputs.total-count }}"
          echo "Status: ${{ steps.status.outputs.overall-status }}"
          echo ""
          
          case "${{ steps.status.outputs.overall-status }}" in
            "success")
              echo "✅ All release channels completed successfully!"
              ;;
            "partial")
              echo "⚠️ Partial success - some channels failed"
              ;;
            "failure")
              echo "❌ Release failed across all channels"
              ;;
          esac
          
          echo ""
          echo "📋 Channel Results:"
          echo "• npm: ${{ needs.publish-npm.result }}"
          echo "• GitHub Releases: ${{ needs.create-github-release.result }}"
          echo "• Docker: ${{ needs.build-docker.result }}"